{"ast":null,"code":"const HTTPInterface = {\n  SERVER_URL: 'http://localhost:5000/api',\n\n  async GET(endpoint) {\n    const response = await fetch(`${this.SERVER_URL}/${endpoint}`);\n    return response.json();\n  },\n\n  async POST(endpoint, data) {\n    const response = await fetch(`${this.SERVER_URL}/${endpoint}`, {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    return await response.json();\n  },\n\n  async DELETE(endpoint) {\n    const response = await fetch(`${this.SERVER_URL}/${endpoint}`, {\n      method: 'DELETE'\n    });\n    return response.status;\n  },\n\n  async PATCH(endpoint) {\n    const response = await fetch(`${this.SERVER_URL}/${endpoint}`, {\n      method: 'PATCH'\n    });\n    return response.status;\n  }\n\n};\n\nclass HTTPService {\n  constructor() {\n    this.products = [];\n    this.productsBaseUrl = 'products';\n    this.passwordBaseUrl = 'password';\n  }\n\n  async fetchAllProducts() {\n    try {\n      return await HTTPInterface.GET(`${this.productsBaseUrl}`);\n    } catch (error) {\n      return this.products;\n    }\n  }\n\n  async getProductByID(id) {\n    return HTTPInterface.GET(`${this.productsBaseUrl}/${id}`);\n  }\n\n  async getRecipesByCategory(category) {\n    if (!category) {\n      return this.fetchAllRecipes();\n    }\n\n    try {\n      return await HTTPInterface.GET(`${this.recipesBaseURL}/category/${category}`);\n    } catch (error) {\n      return this.recettes;\n    }\n  }\n\n  async checkPassword(passwordInput) {\n    try {\n      return await HTTPInterface.POST(`${this.passwordBaseUrl}`, {\n        'id': passwordInput\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n}\n\nconst httpService = new HTTPService();\nexport default httpService;","map":{"version":3,"sources":["C:/Ivan_programming/web-dev-project/client/src/services/http.service.js"],"names":["HTTPInterface","SERVER_URL","GET","endpoint","response","fetch","json","POST","data","method","body","JSON","stringify","headers","DELETE","status","PATCH","HTTPService","constructor","products","productsBaseUrl","passwordBaseUrl","fetchAllProducts","error","getProductByID","id","getRecipesByCategory","category","fetchAllRecipes","recipesBaseURL","recettes","checkPassword","passwordInput","console","log","httpService"],"mappings":"AAAA,MAAMA,aAAa,GAAG;AAClBC,EAAAA,UAAU,EAAE,2BADM;;AAGlB,QAAMC,GAAN,CAAUC,QAAV,EAAoB;AAClB,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAE,KAAKJ,UAAW,IAAGE,QAAS,EAAhC,CAA5B;AACA,WAAOC,QAAQ,CAACE,IAAT,EAAP;AACD,GANiB;;AAQlB,QAAMC,IAAN,CAAWJ,QAAX,EAAqBK,IAArB,EAA2B;AACvB,UAAMJ,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAE,KAAKJ,UAAW,IAAGE,QAAS,EAAhC,EAAmC;AAC7DM,MAAAA,MAAM,EAAE,MADqD;AAE7DC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeJ,IAAf,CAFuD;AAG7DK,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AAHoD,KAAnC,CAA5B;AAOA,WAAO,MAAMT,QAAQ,CAACE,IAAT,EAAb;AACH,GAjBiB;;AAmBlB,QAAMQ,MAAN,CAAaX,QAAb,EAAuB;AACrB,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAE,KAAKJ,UAAW,IAAGE,QAAS,EAAhC,EAAmC;AAC7DM,MAAAA,MAAM,EAAE;AADqD,KAAnC,CAA5B;AAGA,WAAOL,QAAQ,CAACW,MAAhB;AACD,GAxBiB;;AA0BlB,QAAMC,KAAN,CAAYb,QAAZ,EAAsB;AACpB,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAE,KAAKJ,UAAW,IAAGE,QAAS,EAAhC,EAAmC;AAC7DM,MAAAA,MAAM,EAAE;AADqD,KAAnC,CAA5B;AAGA,WAAOL,QAAQ,CAACW,MAAhB;AACD;;AA/BiB,CAAtB;;AAkCA,MAAME,WAAN,CAAkB;AACdC,EAAAA,WAAW,GAAG;AACZ,SAAKC,QAAL,GAAgB,EAAhB;AACA,SAAKC,eAAL,GAAuB,UAAvB;AACA,SAAKC,eAAL,GAAuB,UAAvB;AACD;;AAEqB,QAAhBC,gBAAgB,GAAG;AACvB,QAAI;AACF,aAAO,MAAMtB,aAAa,CAACE,GAAd,CAAmB,GAAE,KAAKkB,eAAgB,EAA1C,CAAb;AACD,KAFD,CAEE,OAAOG,KAAP,EAAc;AACd,aAAO,KAAKJ,QAAZ;AACD;AACF;;AAEmB,QAAdK,cAAc,CAACC,EAAD,EAAK;AACvB,WAAOzB,aAAa,CAACE,GAAd,CAAmB,GAAE,KAAKkB,eAAgB,IAAGK,EAAG,EAAhD,CAAP;AACD;;AAEyB,QAApBC,oBAAoB,CAACC,QAAD,EAAW;AACnC,QAAI,CAACA,QAAL,EAAe;AACb,aAAO,KAAKC,eAAL,EAAP;AACD;;AAED,QAAI;AACF,aAAO,MAAM5B,aAAa,CAACE,GAAd,CAAmB,GAAE,KAAK2B,cAAe,aAAYF,QAAS,EAA9D,CAAb;AACD,KAFD,CAEE,OAAOJ,KAAP,EAAc;AACd,aAAO,KAAKO,QAAZ;AACD;AACF;;AAEkB,QAAbC,aAAa,CAACC,aAAD,EAAgB;AAC/B,QAAI;AACF,aAAO,MAAMhC,aAAa,CAACO,IAAd,CAAoB,GAAE,KAAKc,eAAgB,EAA3C,EAA8C;AAAC,cAAMW;AAAP,OAA9C,CAAb;AACD,KAFD,CAEE,OAAOT,KAAP,EAAc;AACdU,MAAAA,OAAO,CAACC,GAAR,CAAYX,KAAZ;AACD;AAEJ;;AAtCa;;AAyClB,MAAMY,WAAW,GAAG,IAAIlB,WAAJ,EAApB;AACA,eAAekB,WAAf","sourcesContent":["const HTTPInterface = {\r\n    SERVER_URL: 'http://localhost:5000/api',\r\n\r\n    async GET(endpoint) {\r\n      const response = await fetch(`${this.SERVER_URL}/${endpoint}`);\r\n      return response.json();\r\n    },\r\n\r\n    async POST(endpoint, data) {\r\n        const response = await fetch(`${this.SERVER_URL}/${endpoint}`, {\r\n          method: 'POST',\r\n          body: JSON.stringify(data),\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n        });\r\n        return await response.json();\r\n    },\r\n\r\n    async DELETE(endpoint) {\r\n      const response = await fetch(`${this.SERVER_URL}/${endpoint}`, {\r\n        method: 'DELETE',\r\n      });\r\n      return response.status;\r\n    },\r\n  \r\n    async PATCH(endpoint) {\r\n      const response = await fetch(`${this.SERVER_URL}/${endpoint}`, {\r\n        method: 'PATCH',\r\n      });\r\n      return response.status;\r\n    }\r\n}\r\n\r\nclass HTTPService {\r\n    constructor() {\r\n      this.products = [];\r\n      this.productsBaseUrl = 'products';\r\n      this.passwordBaseUrl = 'password';\r\n    }\r\n\r\n    async fetchAllProducts() {\r\n      try {\r\n        return await HTTPInterface.GET(`${this.productsBaseUrl}`);\r\n      } catch (error) {\r\n        return this.products;\r\n      }\r\n    }\r\n\r\n    async getProductByID(id) {\r\n      return HTTPInterface.GET(`${this.productsBaseUrl}/${id}`);\r\n    }\r\n\r\n    async getRecipesByCategory(category) {\r\n      if (!category) {\r\n        return this.fetchAllRecipes();\r\n      }\r\n  \r\n      try {\r\n        return await HTTPInterface.GET(`${this.recipesBaseURL}/category/${category}`);\r\n      } catch (error) {\r\n        return this.recettes;\r\n      }\r\n    }\r\n\r\n    async checkPassword(passwordInput) {\r\n        try {\r\n          return await HTTPInterface.POST(`${this.passwordBaseUrl}`, {'id': passwordInput});\r\n        } catch (error) { \r\n          console.log(error) \r\n        }\r\n\r\n    }\r\n}\r\n\r\nconst httpService = new HTTPService();\r\nexport default httpService;"]},"metadata":{},"sourceType":"module"}